using CommandLine;
using System.Collections.Generic;

namespace NF.Tools.DataFlow
{
    [Verb("code-gen", HelpText = "generate code from exel.")]
    public class DataFlowRunnerOption
    {
        [Option("in_paths", Group = "in", HelpText = ".xlsx or directory")]
        public IEnumerable<string> in_paths { get; set; }

        [Option("config", Group = "in", Default = "dataflow.yaml", HelpText = "config file path")]
        public string config { get; set; }

        [Option("out_database", Group = "out", HelpText = "database path")]
        public string out_database { get; set; }

        [Option("out_csharp", Group = "out", HelpText = "csharp directory")]
        public string out_csharp { get; set; }

        [Option("password", Default = "", HelpText = "db password")]
        public string password { get; set; }

        [Option("namespace", Default = "AutoGenerated.DB", HelpText = "namespace")]
        public string @namespace { get; set; }

        [Option("template_paths", Default = null, HelpText = "template paths")]
        public IEnumerable<string> template_paths { get; set; }

        [Option("assemblely", Default = true, HelpText = "try to generate Assembly even if does not generate database")]
        public bool assemblely { get; set; }

        [Option("datetime_as_ticks", Default = true, HelpText = "save datetime as ticks on database")]
        public bool datetime_as_ticks { get; set; }

        public DataFlowRunnerOption Clone()
        {
            return new DataFlowRunnerOption
            {
                in_paths = this.in_paths,
                config = this.config,
                out_database = this.out_database,
                out_csharp = this.out_csharp,
                password = this.password,
                @namespace = this.@namespace,
                template_paths = this.template_paths,
                assemblely = this.assemblely,
                datetime_as_ticks = this.datetime_as_ticks,
            };
        }

        public DataFlowRunnerOption Merge(in DataFlowRunnerOption o)
        {
            DataFlowRunnerOption ret = this.Clone();
            if (ret.in_paths == null)
            {
                ret.in_paths = o.in_paths;
            }

            ret.assemblely = o.assemblely;

            if (ret.out_csharp == null)
            {
                ret.out_csharp = o.out_csharp;
            }
            if (ret.out_database == null)
            {
                ret.out_database = o.out_database;
            }
            if (ret.password == null)
            {
                ret.password = o.password;
            }
            if (ret.@namespace == null)
            {
                ret.@namespace = o.@namespace;
            }
            if (ret.template_paths == null)
            {
                ret.template_paths = o.template_paths;
            }
            if (ret.datetime_as_ticks != o.datetime_as_ticks)
            {
                ret.datetime_as_ticks = o.datetime_as_ticks;
            }

            // NOTE(pyoung): pass - ConfigFpath 
            return ret;
        }

        // TODO(pyoung): 아싸리 커스텀 sln폴더를 포함시켜 빌드시키게 하는 걸 옵션으로 주면 어떨까?
    }
}