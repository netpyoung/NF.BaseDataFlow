using NF.Tools.DataFlow;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;
using YamlDotNet.Serialization;

namespace DataFlowGUI
{
    public partial class DataFlowGUIForm : Form
    {
        DataFlowRunnerOption _opt = new DataFlowRunnerOption();
        const string DATAFLOW_YAML = "dataflow.yaml";

        public DataFlowGUIForm()
        {
            InitializeComponent();
            if (File.Exists(DATAFLOW_YAML))
            {
                string configYamlStr = File.ReadAllText(DATAFLOW_YAML);
                IDeserializer deserializer = new DeserializerBuilder().Build();
                DataFlowRunnerOption yaml = deserializer.Deserialize<DataFlowRunnerOption>(configYamlStr);
                _opt = yaml;

                if (_opt != null)
                {
                    if (_opt.input_paths != null)
                    {
                        foreach (string inputPaths in _opt.input_paths)
                        {
                            list_excel.Items.Add(inputPaths);
                        }
                    }
                    txt_dst.Text = _opt.output_db_path;
                }
            }
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            _opt.input_paths = GetInputPathsOrNull(list_excel);
            _opt.@namespace = "AutoGenerated.DB";
            _opt.output_db_path = txt_dst.Text;

            try
            {
                ISerializer serializer = new SerializerBuilder().Build();
                string configYamlStr = serializer.Serialize(_opt);
                File.WriteAllText(DATAFLOW_YAML, configYamlStr);
            }
            finally
            {
                base.OnFormClosing(e);
            }
        }

        private void OnListExcel_DragDrop(object sender, DragEventArgs e)
        {
            bool xx = e.Data.GetDataPresent(DataFormats.FileDrop);
            if (!xx)
            {
                return;
            }

            object dd = e.Data.GetData(DataFormats.FileDrop);
            if (dd == null)
            {
                return;
            }

            string[] paths = dd as string[];
            if (paths == null)
            {
                return;
            }

            foreach (string x in DataFlowRunner.GetExcelFpaths(paths))
            {
                list_excel.Items.Add(x);
            }
        }

        private void OnListExcel_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Link;
        }

        private void OnListExcel_DragOver(object sender, DragEventArgs e)
        {

        }

        private void OnBtnRemove_Click(object sender, System.EventArgs e)
        {
            while (list_excel.SelectedItems.Count > 0)
            {
                list_excel.Items.Remove(list_excel.SelectedItem);
            }
        }

        private void OnBtnBrowseSrc_Click(object sender, System.EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Multiselect = true;
                openFileDialog.Filter = "excel files (*.xlsx)|*.xlsx";
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    foreach (string fileName in openFileDialog.FileNames)
                    {
                        list_excel.Items.Add(fileName);
                    }
                }
            }
        }

        List<string> GetInputPathsOrNull(ListBox listBox)
        {
            int listCount = listBox.Items.Count;
            if (listCount == 0)
            {
                return null;
            }

            List<string> ret = new List<string>(listBox.Items.Count);
            foreach (object item in listBox.Items)
            {
                ret.Add(item.ToString());
            }
            return ret;
        }

        private void OnBtnGo_Click(object sender, System.EventArgs e)
        {
            List<string> inputPaths = GetInputPathsOrNull(list_excel);
            if (inputPaths == null)
            {
                return;
            }

            _opt.input_paths = inputPaths;
            _opt.@namespace = "AutoGenerated.DB";
            _opt.output_db_path = txt_dst.Text;
            progress_export.Value = 0;

            int ret = DataFlowRunner.Run(_opt);
            progress_export.Value = 100;
        }

        private void OnBtnBrowseDst_Click(object sender, System.EventArgs e)
        {
            using (SaveFileDialog openFileDialog = new SaveFileDialog())
            {
                openFileDialog.Filter = "db files (*.db)|*.db";
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    txt_dst.Text = openFileDialog.FileName;
                }
            }
        }
    }
}